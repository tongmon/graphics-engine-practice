빛의 기본 공식


일단 초반 요소 물질의 색상(m), 빛의 세기(k), 빛의 색상(l)들을 곱하여 나타낸다.
예시)
물질의 색상(m) --> (0.5, 1.0, 0.75)
빛의 색상(l) --> (0.8, 0.8, 0.8)
빛의 세기(k) --> 면의 법선 벡터와 역 빛 벡터(정확히 빛 벡터 반대 방향, 반사가 아님!)의 각으로 나타남
따라서 빛의 세기 공식 --> max(dot(법선 벡터, 빛 벡터), 0)
이렇게 구해진 3개를 k * cross(l,m) 하면 답이 나온다.
cross(l,m)은 사실 걍 곱한거다 
cross( (0.8, 0.8, 0.8) , (0.5, 1.0, 0.75) ) --> (0.4, 0.8, 0.6)

여기에 더 사실적인 묘사를 위해 주변광을 추가한다.
주변광을 추가하는 이유는 직접광만 비추면 주전자는 빛이 비추는 면만
색이 날까?
일상생활에서 생각해보면 이는 아니다. 주변에 다른 빛도 있으므로 반대편도
완전 검은색으로 보이진 않는다.
주변광은 주변광 색(la), 주변광 받는 물체의 색(ma)으로 이루어지며 위의 빛 도출식에 추가되어
la * ma + k * cross(l,m) 으로 주변광까지 고려한 식이 나온다.

여기에 직접광과 원리가 같고 값만 다른 분산광(거친표면의 경우, 난반사)
도 추가되어 la * ma + k * cross(l,m) + kd * cross(ld,md) 이러한 식이 된다.

여기서 더 추가할 수 있는 반영광은 당구공에 빛이
쐐어지면 흰색 하이라이트가 생기는 것을 볼 수 있는데 이런 효과를 말한다.
이는 실생활에서도 우리가 어디로 움직이냐에 따라 반영광 위치도 변경되기에
DX에서 시점벡터에 영향을 받는다.
반영광도 직접광처럼 반영광 세기(ks), 반영광 색상(ls), 반영광 물체 색(ms)이 있다.
반영광 물체 색(ms), 반영광 색상(ls)은 직접광과 원리가 같고(값을 달라도 된다.)
반영광 세기(ks)가 조금 다르다.
반영광 세기(ks) ---> 시점 벡터(v), 빛 반사 벡터(ll)로 나타내어지고 도형의
모습에 따라 달라지는 지수 p에 영향을 받는다.
p는 밑밑한 도형보다 반짝이는 표면일 수록 커진다.
반짝일 수록 반영광 면적이 줄어들고 더 하얗게 되어야 하니깐....
max(dot(v, ll), 0)의 p 제곱이 ks 값이 되며 p는 1 이상이고 빛이 없는 경우
즉 직접광이 없는데 반영광이 있다는 것은 모순이므로 dot(l, n) > 0인 경우에만 정의된다.
따라서 최종식
la * ma(주변광) + k * cross(l,m)(직접광) + ks * cross(ls,ms)(반영광) + kd * cross(ld,md)(분산광)
이렇게 되고 이 4개를 잘 사용하여 더 나은 그래픽 시각 효과를 만들게 된다.
보통 반영광과 분산광은 같이 잘 쓰진 않는다.

점광을 표현할 때는 빛의 감쇠를 도출해주는 식을 입힌다.
결과적으로 점마다 식 값이 달라지게 된다.
a0 + a1 * d + a2 * d * d를 k * cross()꼴에다가 다 나누어준다.
주변광(la * ma)은 나누는 대상에서 제외한다.
계수가 (a0, a1, a2) 라고하고 실제 물리현상을 따라가려면 
계수를 (0,0,1)로 지정하지만 직접적인 표현을 위해
보통 (0,1,0)을 사용한다.

점적광(스포트라이트)는 점광에서 범위를 제한해주면 된다.
제한은 반영광의 빛의 세기 조절과 비슷하게 해준다.