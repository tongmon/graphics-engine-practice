베지어 곡면 예제에서 제어점이 16개가 들어가는데
DX의 테셀레이션을 거치면서 자동으로 사각 테셀레이션이 진행되는 것을 보고 굉장히 황당했다.
이것을 보고 나는 "16개의 제어점을 Hull Shader가 받으면 자동으로 16개의 정점 중에 모서리 4개에 해당하는 정점을 찾는 것인가?"
라는 궁금증이 들었고 혼자 소스를 고치고 뜯고 테스트를 해봐도 해결책이 안보여서
인터넷을 계속 뒤져보니 내가 원하는 답이 여기 있었다.
https://gamedev.net/forums/topic/561036-dx11-patches-control-points-tesselation/4598270/
일단 제어점은 ConstantHS, HS 단계에서 전혀 의미가 없다고 한다.
저 두개의 단계에서는 그냥 domain 형상(quad, tri, isoline)과 테셀레이션 패치 계수에 따라 적절하게 나누기만
진행한다.
그냥 세분화만 진행하는 것이기 때문에 좌표에 대한 실체가 없다.
단지 오프셋 uv(tri 에서는 uvw)만 생길 뿐이다.
이 uv 생성은 다행이 하드웨어가 계산을 해주는 것이고 이를 Domain Shader에서 사용하게 되는 것이다.
결과적으로 제어점은 도메인 쉐이더 단계까지 가야 의미가 있는 것이다.
그 전에는 제어점을 몇 개를 받던 상관이 없다.
그냥 패치 계수대로 도형을 나눌 뿐인 것이다.
실제적인 좌표는 Domain Shader에서 uv[w]를 통해 정하게 되는 것이다.
다시 베지어 예제로 돌아와보면 ConstantHS, HS 단계에서는 사각형 패치에다가 계수를 25로 정했기 때문에
25x25의 사각형으로 쪼개진 uv를 하드웨어 계산으로 생성한다.
이 uv를 Domain Shader에서 이용하여 제어점 16개와 함께 베지어 곡선 식을 세우고 실제 좌표를 획득하는 것이다.
다시 말하지만 Domain Shader에서 uv와 제어점을 같이 사용해 좌표의 실체를 뜯어내는 것이다.
그 전에는 제어점을 사용하지 않는다.