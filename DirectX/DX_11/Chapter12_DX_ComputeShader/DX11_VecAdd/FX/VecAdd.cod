//
// FX Version: fx_5_0
//
// 3 local object(s)
//
StructuredBuffer gInputA;
StructuredBuffer gInputB;
RWStructuredBuffer gOutput;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 VecAdd
    {
        pass P0
        {
            VertexShader = NULL;
            PixelShader = NULL;
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // Resource bind info for gInputA
                // {
                //
                //   struct Data
                //   {
                //       
                //       float3 v1;                     // Offset:    0
                //       float2 v2;                     // Offset:   12
                //
                //   } $Element;                        // Offset:    0 Size:    20
                //
                // }
                //
                // Resource bind info for gInputB
                // {
                //
                //   struct Data
                //   {
                //       
                //       float3 v1;                     // Offset:    0
                //       float2 v2;                     // Offset:   12
                //
                //   } $Element;                        // Offset:    0 Size:    20
                //
                // }
                //
                // Resource bind info for gOutput
                // {
                //
                //   struct Data
                //   {
                //       
                //       float3 v1;                     // Offset:    0
                //       float2 v2;                     // Offset:   12
                //
                //   } $Element;                        // Offset:    0 Size:    20
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gInputA                           texture  struct         r/o    0        1
                // gInputB                           texture  struct         r/o    1        1
                // gOutput                               UAV  struct         r/w    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_resource_structured t0, 20 
                dcl_resource_structured t1, 20 
                dcl_uav_structured u0, 20
                dcl_input vThreadID.x
                dcl_temps 3
                dcl_thread_group 32, 1, 1
                
                #line 19 "D:\Data\Books\Book IV\Code\Chapter 12\VecAdd\FX\VecAdd.fx"
                mov r0.x, vThreadID.x
                ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r1.x, r0.x, l(0), t0.xxxx  // gInputA<0>
                ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r1.y, r0.x, l(4), t0.xxxx  // gInputA<0>
                ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r1.z, r0.x, l(8), t0.xxxx  // gInputA<0>
                ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r2.x, r0.x, l(0), t1.xxxx  // gInputB<0>
                ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r2.y, r0.x, l(4), t1.xxxx  // gInputB<0>
                ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r2.z, r0.x, l(8), t1.xxxx  // gInputB<0>
                add r0.yzw, r1.xxyz, r2.xxyz
                store_structured u0.x, r0.x, l(0), r0.y  // gOutput<0>
                store_structured u0.x, r0.x, l(4), r0.z  // gOutput<0>
                store_structured u0.x, r0.x, l(8), r0.w  // gOutput<0>
                ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r1.x, r0.x, l(12), t0.xxxx  // gInputA<0>
                ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r1.y, r0.x, l(16), t0.xxxx  // gInputA<0>
                ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r2.x, r0.x, l(12), t1.xxxx  // gInputB<0>
                ld_structured_indexable(structured_buffer, stride=20)(mixed,mixed,mixed,mixed) r2.y, r0.x, l(16), t1.xxxx  // gInputB<0>
                add r0.yz, r1.xxyx, r2.xxyx
                store_structured u0.x, r0.x, l(12), r0.y  // gOutput<0>
                store_structured u0.x, r0.x, l(16), r0.z  // gOutput<0>
                
                #line 17
                ret 
                // Approximately 19 instruction slots used
                            
            };
        }

    }

}

