//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame
{
    float4x4 gViewToTexSpace;           // Offset:    0, size:   64
    float4  gOffsetVectors[14];         // Offset:   64, size:  224
    float4  gFrustumCorners[4];         // Offset:  288, size:   64
    float   gOcclusionRadius = 0.5;     // Offset:  352, size:    4
    float   gOcclusionFadeStart = 0.200000003;// Offset:  356, size:    4
    float   gOcclusionFadeEnd = 2;      // Offset:  360, size:    4
    float   gSurfaceEpsilon = 0.0500000007;// Offset:  364, size:    4
}

//
// 4 local object(s)
//
Texture2D gNormalDepthMap;
Texture2D gRandomVecMap;
SamplerState samNormalDepth
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 100000);
};
SamplerState samRandomVec
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Ssao
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gViewToTexSpace;          // Offset:    0 Size:    64 [unused]
                //   float4 gOffsetVectors[14];         // Offset:   64 Size:   224 [unused]
                //   float4 gFrustumCorners[4];         // Offset:  288 Size:    64
                //   float gOcclusionRadius;            // Offset:  352 Size:     4 [unused]
                //      = 0x3f000000 
                //   float gOcclusionFadeStart;         // Offset:  356 Size:     4 [unused]
                //      = 0x3e4ccccd 
                //   float gOcclusionFadeEnd;           // Offset:  360 Size:     4 [unused]
                //      = 0x40000000 
                //   float gSurfaceEpsilon;             // Offset:  364 Size:     4 [unused]
                //      = 0x3d4ccccd 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   x   
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[22], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.x
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_temps 3
                
                #line 61 "D:\Data\Books\Book IV\Code\Chapter 18\Ssao\FX\Ssao.fx"
                mov r0.xyz, v0.xyzx  // vout<0,1,2>
                mov r0.w, l(1.000000)  // vout<3: 1f>
                
                #line 64
                ftou r1.x, v1.x
                mov r1.xyz, cb0[r1.x + 18].xyzx  // vout<4,5,6>
                
                #line 67
                mov r2.xy, v2.xyxx  // vout<7,8>
                mov o0.xyzw, r0.xyzw  // VS<0,1,2,3: 1f>
                mov o1.xyz, r1.xyzx  // VS<4,5,6>
                mov o2.xy, r2.xyxx  // VS<7,8>
                ret 
                // Approximately 9 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gViewToTexSpace;          // Offset:    0 Size:    64
                //   float4 gOffsetVectors[14];         // Offset:   64 Size:   224
                //   float4 gFrustumCorners[4];         // Offset:  288 Size:    64 [unused]
                //   float gOcclusionRadius;            // Offset:  352 Size:     4
                //      = 0x3f000000 
                //   float gOcclusionFadeStart;         // Offset:  356 Size:     4
                //      = 0x3e4ccccd 
                //   float gOcclusionFadeEnd;           // Offset:  360 Size:     4
                //      = 0x40000000 
                //   float gSurfaceEpsilon;             // Offset:  364 Size:     4
                //      = 0x3d4ccccd 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samNormalDepth                    sampler      NA          NA    0        1
                // samRandomVec                      sampler      NA          NA    1        1
                // gNormalDepthMap                   texture  float4          2d    0        1
                // gRandomVecMap                     texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 7
                
                #line 117 "D:\Data\Books\Book IV\Code\Chapter 18\Ssao\FX\Ssao.fx"
                sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0, l(0.000000)  // normalDepth<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r0.xyz, r0.xyzx  // n<0:Inf,1:Inf,2:Inf>
                mov r0.w, r0.w  // pz<0:Inf>
                
                #line 128
                div r0.w, r0.w, v1.z
                mul r1.xyz, r0.wwww, v1.xyzx  // p<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 131
                mul r2.xy, v2.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t1.xyzw, s1, l(0.000000)
                mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // randVec<0:Inf,1:Inf,2:Inf>
                
                #line 142
                dp3 r0.w, cb0[4].xyzx, r2.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r3.xyz, r0.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[4].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 145
                dp3 r0.w, r3.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                lt r0.w, r0.w, l(0.000000)
                iadd r0.w, r0.w, -r1.w
                itof r0.w, r0.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 148
                mul r0.w, r0.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r0.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r0.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r5.xyxx, r0.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r0.w, r0.w  // rz<0:Inf>
                
                #line 164
                div r0.w, r0.w, r4.z
                mul r3.xyz, r4.xyzx, r0.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 178
                mov r0.w, -r3.z
                add r0.w, r0.w, r1.z  // distZ<0:NaN:Inf>
                mov r4.xyz, -r1.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx
                dp3 r1.w, r0.xyzx, r3.xyzx
                max r1.w, r1.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r0.w, r0.w  // distZ<0:NaN:Inf>
                
                #line 96
                lt r2.w, cb0[22].w, r0.w
                if_nz r2.w
                  mov r2.w, -cb0[22].y
                  add r2.w, r2.w, cb0[22].z  // fadeLength<0:Inf>
                
                #line 102
                  mov r0.w, -r0.w
                  add r0.w, r0.w, cb0[22].z
                  div r0.w, r0.w, r2.w
                  max r0.w, r0.w, l(0.000000)
                  min r0.w, r0.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 96
                else 
                  mov r0.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 105
                mov r0.w, r0.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 180
                mul r0.w, r0.w, r1.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, l(0.000000)  // occlusionSum<0:NaN:Inf>
                
                #line 142
                dp3 r1.w, cb0[5].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[5].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 145
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 148
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 164
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 178
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 96
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 102
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 96
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 105
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 180
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 142
                dp3 r1.w, cb0[6].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[6].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 145
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 148
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 164
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 178
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 96
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 102
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 96
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 105
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 180
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 142
                dp3 r1.w, cb0[7].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[7].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 145
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 148
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 164
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 178
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 96
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 102
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 96
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 105
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 180
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 142
                dp3 r1.w, cb0[8].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[8].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 145
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 148
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 164
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 178
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 96
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 102
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 96
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 105
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 180
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 142
                dp3 r1.w, cb0[9].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[9].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 145
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 148
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 164
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 178
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 96
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 102
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 96
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 105
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 180
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 142
                dp3 r1.w, cb0[10].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[10].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 145
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 148
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 164
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 178
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 96
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 102
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 96
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 105
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 180
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 142
                dp3 r1.w, cb0[11].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[11].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 145
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 148
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 164
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 178
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 96
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 102
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 96
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 105
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 180
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 142
                dp3 r1.w, cb0[12].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 145
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 148
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 164
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 178
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 96
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 102
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 96
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 105
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 180
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 142
                dp3 r1.w, cb0[13].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[13].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 145
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 148
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 164
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 178
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 96
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 102
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 96
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 105
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 180
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 142
                dp3 r1.w, cb0[14].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[14].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 145
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 148
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 164
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 178
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 96
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 102
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 96
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 105
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 180
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 142
                dp3 r1.w, cb0[15].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[15].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 145
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 148
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 164
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 178
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 96
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 102
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 96
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 105
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 180
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 142
                dp3 r1.w, cb0[16].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r3.xyz, r1.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[16].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 145
                dp3 r1.w, r3.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 148
                mul r1.w, r1.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r1.wwww
                add r3.xyz, r1.xyzx, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r3.xy, r6.xyxx, r1.wwww  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r1.w, r1.w  // rz<0:Inf>
                
                #line 164
                div r1.w, r1.w, r5.z
                mul r3.xyz, r5.xyzx, r1.wwww  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 178
                mov r1.w, -r3.z
                add r1.w, r1.w, r1.z  // distZ<0:NaN:Inf>
                add r3.xyz, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                dp3 r2.w, r0.xyzx, r3.xyzx
                max r2.w, r2.w, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.w, r1.w  // distZ<0:NaN:Inf>
                
                #line 96
                lt r3.x, cb0[22].w, r1.w
                if_nz r3.x
                  mov r3.x, -cb0[22].y
                  add r3.x, r3.x, cb0[22].z  // fadeLength<0:Inf>
                
                #line 102
                  mov r1.w, -r1.w
                  add r1.w, r1.w, cb0[22].z
                  div r1.w, r1.w, r3.x
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 96
                else 
                  mov r1.w, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 105
                mov r1.w, r1.w  // OcclusionFunction<0:[-0f,1f]>
                
                #line 180
                mul r1.w, r1.w, r2.w  // occlusion<0:NaN:Inf>
                add r0.w, r0.w, r1.w  // occlusionSum<0:NaN:Inf>
                
                #line 142
                dp3 r1.w, cb0[17].xyzx, r2.xyzx
                add r1.w, r1.w, r1.w
                mov r1.w, -r1.w
                mul r2.xyz, r1.wwww, r2.xyzx
                add r2.xyz, r2.xyzx, cb0[17].xyzx  // offset<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 145
                dp3 r1.w, r2.xyzx, r0.xyzx
                lt r2.w, l(0.000000), r1.w
                lt r1.w, r1.w, l(0.000000)
                iadd r1.w, r1.w, -r2.w
                itof r1.w, r1.w  // flip<0:[-2.14748e+009f,2.14748e+009f]>
                
                #line 148
                mul r1.w, r1.w, cb0[22].x
                mul r2.xyz, r2.xyzx, r1.wwww
                add r2.xyz, r1.xyzx, r2.xyzx  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyw, r2.xyxz  // q<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 151
                mov r2.w, l(1.000000)
                dp4 r3.x, r2.xyzw, cb0[0].xyzw  // projQ<0:NaN:Inf>
                dp4 r3.y, r2.xyzw, cb0[1].xyzw  // projQ<1:NaN:Inf>
                dp4 r2.x, r2.xyzw, cb0[3].xyzw  // projQ<3:NaN:Inf>
                div r2.xy, r3.xyxx, r2.xxxx  // projQ<0:NaN:Inf,1:NaN:Inf>
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t0.wxyz, s0, l(0.000000)
                mov r2.x, r2.x  // rz<0:Inf>
                
                #line 164
                div r2.x, r2.x, r1.w
                mul r1.xyw, r1.xyxw, r2.xxxx  // r<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 178
                mov r2.x, -r1.w
                add r1.z, r1.z, r2.x  // distZ<0:NaN:Inf>
                add r1.xyw, r4.xyxz, r1.xyxw
                dp3 r2.x, r1.xywx, r1.xywx
                rsq r2.x, r2.x
                mul r1.xyw, r1.xyxw, r2.xxxx
                dp3 r0.x, r0.xyzx, r1.xywx
                max r0.x, r0.x, l(0.000000)  // dp<0:Inf:[-0f,1.#INFf]>
                nop 
                mov r1.z, r1.z  // distZ<0:NaN:Inf>
                
                #line 96
                lt r0.y, cb0[22].w, r1.z
                if_nz r0.y
                  mov r0.y, -cb0[22].y
                  add r0.y, r0.y, cb0[22].z  // fadeLength<0:Inf>
                
                #line 102
                  mov r0.z, -r1.z
                  add r0.z, r0.z, cb0[22].z
                  div r0.y, r0.z, r0.y
                  max r0.y, r0.y, l(0.000000)
                  min r0.y, r0.y, l(1.000000)  // occlusion<0:[0f,1f]>
                
                #line 96
                else 
                  mov r0.y, l(0)  // occlusion<0: 0f>
                endif 
                
                #line 105
                mov r0.y, r0.y  // OcclusionFunction<0:[-0f,1f]>
                
                #line 180
                mul r0.x, r0.y, r0.x  // occlusion<0:NaN:Inf>
                add r0.x, r0.x, r0.w  // occlusionSum<0:NaN:Inf>
                
                #line 185
                div r0.x, r0.x, l(14.000000)  // occlusionSum<0:NaN:Inf>
                mov r0.x, -r0.x
                add r0.x, r0.x, l(1.000000)  // access<0:NaN:Inf>
                
                #line 190
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, l(1.000000)
                max r0.x, r0.x, l(0.000000)
                min o0.xyzw, r0.xxxx, l(1.000000, 1.000000, 1.000000, 1.000000)  // PS<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>
                ret 
                // Approximately 691 instruction slots used
                            
            };
        }

    }

}

