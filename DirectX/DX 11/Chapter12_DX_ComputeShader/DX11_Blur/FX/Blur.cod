//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbSettings
{
    int     gImageWidth;                // Offset:    0, size:    4
    int     gImageHeight;               // Offset:    4, size:    4
    float   gWeights[9] = { 0.100000001, 0.100000001, 0.100000001, 0.100000001, 0.200000003, 0.100000001, 0.100000001, 0.100000001, 0.100000001 };// Offset:   16, size:  132
}

//
// 2 local object(s)
//
Texture2D gInput;
RWTexture2D gOutput;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 HorzBlur
    {
        pass P0
        {
            VertexShader = NULL;
            PixelShader = NULL;
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbSettings
                // {
                //
                //   int gImageWidth;                   // Offset:    0 Size:     4
                //   int gImageHeight;                  // Offset:    4 Size:     4 [unused]
                //   float gWeights[9];                 // Offset:   16 Size:   132
                //      = 0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3e4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gInput                            texture  float4          2d    0        1
                // gOutput                               UAV  float4          2d    0        1
                // cbSettings                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[10], immediateIndexed
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_uav_typed_texture2d (float,float,float,float) u0
                dcl_input vThreadIDInGroup.x
                dcl_input vThreadID.xy
                dcl_temps 4
                dcl_tgsm_structured g0, 16, 264
                dcl_thread_group 256, 1, 1
                
                #line 42 "D:\Data\Books\Book IV\Code\Chapter 12\Blur\FX\Blur.fx"
                ilt r0.x, vThreadIDInGroup.x, l(4)
                if_nz r0.x
                  mov r0.x, vThreadIDInGroup.x  // groupThreadID<0:[0,3]>
                
                #line 45
                  iadd r0.y, vThreadID.x, l(-4)
                  imax r1.x, r0.y, l(0)  // x<0:[0,16842490]>
                  mov r1.y, vThreadID.y
                  mov r1.zw, l(0,0,0,0)
                  ld_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyzw, t0.xyzw
                  store_structured g0.x, r0.x, l(0), r1.x  // gCache<0>
                  store_structured g0.x, r0.x, l(4), r1.y  // gCache<0>
                  store_structured g0.x, r0.x, l(8), r1.z  // gCache<0>
                  store_structured g0.x, r0.x, l(12), r1.w  // gCache<0>
                
                #line 42
                endif 
                
                #line 48
                ige r0.x, vThreadIDInGroup.x, l(252)
                if_nz r0.x
                  mov r0.x, vThreadIDInGroup.x  // groupThreadID<0:[252,255]>
                
                #line 51
                  iadd r0.y, vThreadID.x, l(4)
                  iadd r0.z, cb0[0].x, l(-1)
                  imin r1.x, r0.z, r0.y  // x<0:[-2147483648,16842498]>
                  iadd r0.x, r0.x, l(8)
                  mov r1.y, vThreadID.y
                  mov r1.zw, l(0,0,0,0)
                  ld_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyzw, t0.xyzw
                  store_structured g0.x, r0.x, l(0), r1.x  // gCache<0>
                  store_structured g0.x, r0.x, l(4), r1.y  // gCache<0>
                  store_structured g0.x, r0.x, l(8), r1.z  // gCache<0>
                  store_structured g0.x, r0.x, l(12), r1.w  // gCache<0>
                
                #line 48
                endif 
                
                #line 55
                iadd r0.x, vThreadIDInGroup.x, l(4)
                mov r1.xy, vThreadID.xyxx
                mov r1.zw, l(0,0,0,0)
                ld_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyzw, t0.xyzw
                store_structured g0.x, r0.x, l(0), r1.x  // gCache<0>
                store_structured g0.x, r0.x, l(4), r1.y  // gCache<0>
                store_structured g0.x, r0.x, l(8), r1.z  // gCache<0>
                store_structured g0.x, r0.x, l(12), r1.w  // gCache<0>
                
                #line 59
                sync_g_t
                
                #line 70
                iadd r0.y, r0.x, l(-4)  // k<0:[0,255]>
                ld_structured r2.x, r0.y, l(0), g0.xxxx  // gCache<0:Inf>
                ld_structured r2.y, r0.y, l(4), g0.xxxx  // gCache<1:Inf>
                ld_structured r2.z, r0.y, l(8), g0.xxxx  // gCache<2:Inf>
                ld_structured r2.w, r0.y, l(12), g0.xxxx  // gCache<3:Inf>
                mul r2.xyzw, r2.xyzw, cb0[1].xxxx
                add r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                iadd r0.y, r0.x, l(-3)  // k<0:[1,256]>
                ld_structured r3.x, r0.y, l(0), g0.xxxx  // gCache<0:Inf>
                ld_structured r3.y, r0.y, l(4), g0.xxxx  // gCache<1:Inf>
                ld_structured r3.z, r0.y, l(8), g0.xxxx  // gCache<2:Inf>
                ld_structured r3.w, r0.y, l(12), g0.xxxx  // gCache<3:Inf>
                mul r3.xyzw, r3.xyzw, cb0[2].xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                iadd r0.y, r0.x, l(-2)  // k<0:[2,257]>
                ld_structured r3.x, r0.y, l(0), g0.xxxx  // gCache<0:Inf>
                ld_structured r3.y, r0.y, l(4), g0.xxxx  // gCache<1:Inf>
                ld_structured r3.z, r0.y, l(8), g0.xxxx  // gCache<2:Inf>
                ld_structured r3.w, r0.y, l(12), g0.xxxx  // gCache<3:Inf>
                mul r3.xyzw, r3.xyzw, cb0[3].xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                iadd r0.y, r0.x, l(-1)  // k<0:[3,258]>
                ld_structured r3.x, r0.y, l(0), g0.xxxx  // gCache<0:Inf>
                ld_structured r3.y, r0.y, l(4), g0.xxxx  // gCache<1:Inf>
                ld_structured r3.z, r0.y, l(8), g0.xxxx  // gCache<2:Inf>
                ld_structured r3.w, r0.y, l(12), g0.xxxx  // gCache<3:Inf>
                mul r3.xyzw, r3.xyzw, cb0[4].xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mul r1.xyzw, r1.xyzw, cb0[5].xxxx
                add r1.xyzw, r1.xyzw, r2.xyzw  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                iadd r0.y, r0.x, l(1)  // k<0:[5,260]>
                ld_structured r2.x, r0.y, l(0), g0.xxxx  // gCache<0:Inf>
                ld_structured r2.y, r0.y, l(4), g0.xxxx  // gCache<1:Inf>
                ld_structured r2.z, r0.y, l(8), g0.xxxx  // gCache<2:Inf>
                ld_structured r2.w, r0.y, l(12), g0.xxxx  // gCache<3:Inf>
                mul r2.xyzw, r2.xyzw, cb0[6].xxxx
                add r1.xyzw, r1.xyzw, r2.xyzw  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                iadd r0.y, r0.x, l(2)  // k<0:[6,261]>
                ld_structured r2.x, r0.y, l(0), g0.xxxx  // gCache<0:Inf>
                ld_structured r2.y, r0.y, l(4), g0.xxxx  // gCache<1:Inf>
                ld_structured r2.z, r0.y, l(8), g0.xxxx  // gCache<2:Inf>
                ld_structured r2.w, r0.y, l(12), g0.xxxx  // gCache<3:Inf>
                mul r2.xyzw, r2.xyzw, cb0[7].xxxx
                add r1.xyzw, r1.xyzw, r2.xyzw  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                iadd r0.y, r0.x, l(3)  // k<0:[7,262]>
                ld_structured r2.x, r0.y, l(0), g0.xxxx  // gCache<0:Inf>
                ld_structured r2.y, r0.y, l(4), g0.xxxx  // gCache<1:Inf>
                ld_structured r2.z, r0.y, l(8), g0.xxxx  // gCache<2:Inf>
                ld_structured r2.w, r0.y, l(12), g0.xxxx  // gCache<3:Inf>
                mul r2.xyzw, r2.xyzw, cb0[8].xxxx
                add r1.xyzw, r1.xyzw, r2.xyzw  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                iadd r0.x, r0.x, l(4)  // k<0:[8,263]>
                ld_structured r2.x, r0.x, l(0), g0.xxxx  // gCache<0:Inf>
                ld_structured r2.y, r0.x, l(4), g0.xxxx  // gCache<1:Inf>
                ld_structured r2.z, r0.x, l(8), g0.xxxx  // gCache<2:Inf>
                ld_structured r2.w, r0.x, l(12), g0.xxxx  // gCache<3:Inf>
                mul r0.xyzw, r2.xyzw, cb0[9].xxxx
                add r0.xyzw, r0.xyzw, r1.xyzw  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 75
                mov r1.xyzw, vThreadID.xyyy
                store_uav_typed u0.xyzw, r1.xyzw, r0.xyzw  // gOutput<0>
                
                #line 31
                ret 
                // Approximately 98 instruction slots used
                            
            };
        }

    }

    technique11 VertBlur
    {
        pass P0
        {
            VertexShader = NULL;
            PixelShader = NULL;
            ComputeShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbSettings
                // {
                //
                //   int gImageWidth;                   // Offset:    0 Size:     4 [unused]
                //   int gImageHeight;                  // Offset:    4 Size:     4
                //   float gWeights[9];                 // Offset:   16 Size:   132
                //      = 0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3e4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // gInput                            texture  float4          2d    0        1
                // gOutput                               UAV  float4          2d    0        1
                // cbSettings                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Input
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // no Output
                cs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[10], immediateIndexed
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_uav_typed_texture2d (float,float,float,float) u0
                dcl_input vThreadIDInGroup.y
                dcl_input vThreadID.xy
                dcl_temps 4
                dcl_tgsm_structured g0, 16, 264
                dcl_thread_group 1, 256, 1
                
                #line 90 "D:\Data\Books\Book IV\Code\Chapter 12\Blur\FX\Blur.fx"
                ilt r0.x, vThreadIDInGroup.y, l(4)
                if_nz r0.x
                  mov r0.x, vThreadIDInGroup.y  // groupThreadID<1:[0,3]>
                
                #line 93
                  iadd r0.y, vThreadID.y, l(-4)
                  imax r1.y, r0.y, l(0)  // y<0:[0,16842490]>
                  mov r1.x, vThreadID.x
                  mov r1.zw, l(0,0,0,0)
                  ld_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyzw, t0.xyzw
                  store_structured g0.x, r0.x, l(0), r1.x  // gCache<0>
                  store_structured g0.x, r0.x, l(4), r1.y  // gCache<0>
                  store_structured g0.x, r0.x, l(8), r1.z  // gCache<0>
                  store_structured g0.x, r0.x, l(12), r1.w  // gCache<0>
                
                #line 90
                endif 
                
                #line 96
                ige r0.x, vThreadIDInGroup.y, l(252)
                if_nz r0.x
                  mov r0.x, vThreadIDInGroup.y  // groupThreadID<1:[252,255]>
                
                #line 99
                  iadd r0.y, vThreadID.y, l(4)
                  iadd r0.z, cb0[0].y, l(-1)
                  imin r1.y, r0.z, r0.y  // y<0:[-2147483648,16842498]>
                  iadd r0.x, r0.x, l(8)
                  mov r1.x, vThreadID.x
                  mov r1.zw, l(0,0,0,0)
                  ld_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyzw, t0.xyzw
                  store_structured g0.x, r0.x, l(0), r1.x  // gCache<0>
                  store_structured g0.x, r0.x, l(4), r1.y  // gCache<0>
                  store_structured g0.x, r0.x, l(8), r1.z  // gCache<0>
                  store_structured g0.x, r0.x, l(12), r1.w  // gCache<0>
                
                #line 96
                endif 
                
                #line 103
                iadd r0.x, vThreadIDInGroup.y, l(4)
                mov r1.xy, vThreadID.xyxx
                mov r1.zw, l(0,0,0,0)
                ld_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyzw, t0.xyzw
                store_structured g0.x, r0.x, l(0), r1.x  // gCache<0>
                store_structured g0.x, r0.x, l(4), r1.y  // gCache<0>
                store_structured g0.x, r0.x, l(8), r1.z  // gCache<0>
                store_structured g0.x, r0.x, l(12), r1.w  // gCache<0>
                
                #line 107
                sync_g_t
                
                #line 118
                iadd r0.y, r0.x, l(-4)  // k<0:[0,255]>
                ld_structured r2.x, r0.y, l(0), g0.xxxx  // gCache<0:Inf>
                ld_structured r2.y, r0.y, l(4), g0.xxxx  // gCache<1:Inf>
                ld_structured r2.z, r0.y, l(8), g0.xxxx  // gCache<2:Inf>
                ld_structured r2.w, r0.y, l(12), g0.xxxx  // gCache<3:Inf>
                mul r2.xyzw, r2.xyzw, cb0[1].xxxx
                add r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                iadd r0.y, r0.x, l(-3)  // k<0:[1,256]>
                ld_structured r3.x, r0.y, l(0), g0.xxxx  // gCache<0:Inf>
                ld_structured r3.y, r0.y, l(4), g0.xxxx  // gCache<1:Inf>
                ld_structured r3.z, r0.y, l(8), g0.xxxx  // gCache<2:Inf>
                ld_structured r3.w, r0.y, l(12), g0.xxxx  // gCache<3:Inf>
                mul r3.xyzw, r3.xyzw, cb0[2].xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                iadd r0.y, r0.x, l(-2)  // k<0:[2,257]>
                ld_structured r3.x, r0.y, l(0), g0.xxxx  // gCache<0:Inf>
                ld_structured r3.y, r0.y, l(4), g0.xxxx  // gCache<1:Inf>
                ld_structured r3.z, r0.y, l(8), g0.xxxx  // gCache<2:Inf>
                ld_structured r3.w, r0.y, l(12), g0.xxxx  // gCache<3:Inf>
                mul r3.xyzw, r3.xyzw, cb0[3].xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                iadd r0.y, r0.x, l(-1)  // k<0:[3,258]>
                ld_structured r3.x, r0.y, l(0), g0.xxxx  // gCache<0:Inf>
                ld_structured r3.y, r0.y, l(4), g0.xxxx  // gCache<1:Inf>
                ld_structured r3.z, r0.y, l(8), g0.xxxx  // gCache<2:Inf>
                ld_structured r3.w, r0.y, l(12), g0.xxxx  // gCache<3:Inf>
                mul r3.xyzw, r3.xyzw, cb0[4].xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mul r1.xyzw, r1.xyzw, cb0[5].xxxx
                add r1.xyzw, r1.xyzw, r2.xyzw  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                iadd r0.y, r0.x, l(1)  // k<0:[5,260]>
                ld_structured r2.x, r0.y, l(0), g0.xxxx  // gCache<0:Inf>
                ld_structured r2.y, r0.y, l(4), g0.xxxx  // gCache<1:Inf>
                ld_structured r2.z, r0.y, l(8), g0.xxxx  // gCache<2:Inf>
                ld_structured r2.w, r0.y, l(12), g0.xxxx  // gCache<3:Inf>
                mul r2.xyzw, r2.xyzw, cb0[6].xxxx
                add r1.xyzw, r1.xyzw, r2.xyzw  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                iadd r0.y, r0.x, l(2)  // k<0:[6,261]>
                ld_structured r2.x, r0.y, l(0), g0.xxxx  // gCache<0:Inf>
                ld_structured r2.y, r0.y, l(4), g0.xxxx  // gCache<1:Inf>
                ld_structured r2.z, r0.y, l(8), g0.xxxx  // gCache<2:Inf>
                ld_structured r2.w, r0.y, l(12), g0.xxxx  // gCache<3:Inf>
                mul r2.xyzw, r2.xyzw, cb0[7].xxxx
                add r1.xyzw, r1.xyzw, r2.xyzw  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                iadd r0.y, r0.x, l(3)  // k<0:[7,262]>
                ld_structured r2.x, r0.y, l(0), g0.xxxx  // gCache<0:Inf>
                ld_structured r2.y, r0.y, l(4), g0.xxxx  // gCache<1:Inf>
                ld_structured r2.z, r0.y, l(8), g0.xxxx  // gCache<2:Inf>
                ld_structured r2.w, r0.y, l(12), g0.xxxx  // gCache<3:Inf>
                mul r2.xyzw, r2.xyzw, cb0[8].xxxx
                add r1.xyzw, r1.xyzw, r2.xyzw  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                iadd r0.x, r0.x, l(4)  // k<0:[8,263]>
                ld_structured r2.x, r0.x, l(0), g0.xxxx  // gCache<0:Inf>
                ld_structured r2.y, r0.x, l(4), g0.xxxx  // gCache<1:Inf>
                ld_structured r2.z, r0.x, l(8), g0.xxxx  // gCache<2:Inf>
                ld_structured r2.w, r0.x, l(12), g0.xxxx  // gCache<3:Inf>
                mul r0.xyzw, r2.xyzw, cb0[9].xxxx
                add r0.xyzw, r0.xyzw, r1.xyzw  // blurColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 123
                mov r1.xyzw, vThreadID.xyyy
                store_uav_typed u0.xyzw, r1.xyzw, r0.xyzw  // gOutput<0>
                
                #line 79
                ret 
                // Approximately 98 instruction slots used
                            
            };
        }

    }

}

